#!/usr/bin/env python3
import os
import sys
import argparse
import subprocess
import time
from argparse import RawTextHelpFormatter

image_name = "mysql"
image_tag = "5.7.29"

def start_container(name):
    START_COMMAND = """
    sudo docker run -e "MYSQL_ROOT_PASSWORD={password}" -e "MYSQL_USER={user}" -e "MYSQL_PASSWORD={password}" -e "MYSQL_DATABASE={database}"\
        -p {port}:{port} --name={name}  -v /var/lib/mysql:/var/lib/mysql\
        -d {image_name}:{image_tag} mysqld  --datadir=/var/lib/mysql --user=mysql\
        --server-id=1 --log-bin=/var/lib/mysql/mysql-bin.log --binlog_do_db={database}
    """.format(password=os.getenv('TAP_MYSQL_PASSWORD'),
               user=os.getenv('TAP_MYSQL_USER'),
               database=os.getenv('TAP_MYSQL_DBNAME'),
               port=3306,
               name=name,
               image_name=image_name,
               image_tag=image_tag)

    print("Starting Docker process mongo1 using command: {}".format(START_COMMAND))

    proc = subprocess.run(START_COMMAND, shell=True)
    if proc.returncode != 0:
        sys.exit("Exited with code: {}, the docker process failed to start.".format(proc.returncode))
    print("Process started successfully.")

    ip_addr = get_ip_addr(name)
    
    # Sleeping to allow mysql enough time to start up
    time.sleep(5)

    CONFIGURE_COMMAND = """
    docker run --rm mysql:{image_tag} mysql -h {host} -P {port} -u root --password={password} -e "GRANT ALL PRIVILEGES ON *.* TO '{user}'@'%'"
    """.format(image_tag=image_tag,
               host=ip_addr,
               port=3306,
               password=os.getenv('TAP_MYSQL_PASSWORD'),
               user=os.getenv('TAP_MYSQL_USER'))
    print("Grant all permissions for user %s using command: %s" % (os.getenv('TAP_MYSQL_USER'), CONFIGURE_COMMAND))
    proc = subprocess.run(CONFIGURE_COMMAND, shell=True)
    if proc.returncode != 0:
        sys.exit("Exited with code: {}, the docker command failed.".format(proc.returncode))


def get_ip_addr(name):
    IP_ADDR_COMMAND = "docker inspect {} | jq -r .[].NetworkSettings.IPAddress"
    print("Retrieving IP addr of mysql container")
    ip_addr = subprocess.check_output(IP_ADDR_COMMAND.format(name), shell=True).decode('utf-8').rstrip()
    print(ip_addr)
    return ip_addr


def stop_container(name):
    STOP_COMMAND = "sudo docker stop {0} && sudo docker rm {0}"

    print("Stopping Docker process {}".format(name))
    proc = subprocess.run(STOP_COMMAND.format(name), shell=True)
    if proc.returncode != 0:
        sys.exit("Exited with code: {}, the docker process failed to stop.".format(proc.returncode))
    print("Process stopped successfully")

def connect_to_db(name):
    CONNECT_COMMAND = "docker run -it --rm mysql:{image_tag} mysql -h {host} -u {user} -P {port} -D {dbname} --password={password}"

    ip_addr = get_ip_addr(name)

    print("Attempting to connect to running container using a mysql container")
    connect_command_format = CONNECT_COMMAND.format(image_tag=image_tag,
                                                    host=ip_addr,
                                                    user=os.getenv('TAP_MYSQL_USER'),
                                                    port=3306,
                                                    dbname=os.getenv('TAP_MYSQL_DBNAME'),
                                                    password=os.getenv('TAP_MYSQL_PASSWORD'))
    print("Connecting with command: %s" % connect_command_format)
    # NB: Using call instead of run here because it is blocking
    #     This returns only an exit code.
    returncode = subprocess.call(connect_command_format,
                                 shell=True)
    if returncode != 0:
        sys.exit("Exited with code: {}, could not connect.".format(returncode))

DESCRIPTION = """
Manage docker instance for tap-mssql testing.

Uses environment variables:
    TAP_MYSQL_PASSWORD
"""
parser = argparse.ArgumentParser(description=DESCRIPTION, formatter_class=RawTextHelpFormatter)
parser.add_argument('action', choices=['start','stop', 'connect'], help='action to perform with the container')
parser.add_argument('--name', help="name assigned to running docker process", default='mysql1')

def main():
    parsed_args = parser.parse_args()
    # Potential arguments to add: pull, changing docker cointainer, changing password
    if parsed_args.action == 'start':
        start_container(parsed_args.name)
    elif parsed_args.action == 'stop':
        stop_container(parsed_args.name)
    elif parsed_args.action == 'connect':
        connect_to_db(parsed_args.name)

if __name__ == "__main__":
    main()
